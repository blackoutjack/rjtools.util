"""
This type stub file was generated by pyright.
"""

"""
Utility functions for converting values to and from strings
"""
def date_string(date): # -> str | None:
    """
    Convert the given date or datetime into an ISO string representing the date

    :param date: datetime.date|datetime.datetime, date object to convert
    :raises TypeError: when the date is not a datetime/date object or None
    :return: ISO string representing the date, or None if given None
    :rtype: str|None
    """
    ...

def date_user_string(date): # -> str | None:
    """
    Convert the given date or datetime into a American date string

    :param date: datetime.date|datetime.datetime, date object to convert
    :raises TypeError: when the date is not a datetime/date object or None
    :return: ISO string representing the date, or None if given None
    :rtype: str|None
    """
    ...

def timestamp_string(timestamp): # -> str | None:
    """
    Get the current time in ISO format

    :param timestamp: datetime.datetime, the timestamp to convert
    :raises TypeError: when the date is not a datetime object or None
    :return: the timestamp in ISO format
    :rtype: str
    """
    ...

def now_time(): # -> datetime:
    """
    Get the current time

    :return: the current time
    :rtype: datetime.datetime
    """
    ...

def today_date(): # -> date:
    """
    Get the current date

    :return: datetime object representing the current date
    :rtype: datetime.datetime
    """
    ...

def now_string(): # -> str | None:
    """
    Get the current time in ISO format

    :return: the current time
    :rtype: string
    """
    ...

def today_string(): # -> str | None:
    """
    Get the current date in ISO format

    :return: the current date in ISO format
    :rtype: string
    """
    ...

def today_user_string(): # -> str | None:
    """
    Get the current date with 1-or-2-digit month and day and 4-digit year

    :return: string, representing the current date
    """
    ...

def parse_date(dateStr, form=...): # -> date:
    """
    Get an object representing the given date

    :param dateStr: string, the date in format specified by ``form``, defaults
        to ``"YYYY-mm-dd"``
    :param form: string, format to use for parsing ``dateStr``

    :raises ValueError: when an unparsable date or invalid format are given
    :return: datetime object representing the date
    :rtype: datetime.date
    """
    ...

def parse_iso_date(dateISO): # -> date:
    """
    Get an object representing the date given in "YYYY-mm-dd" format

    :param dateISO: string, the date in ISO format

    :raises ValueError: when an unparsable date or invalid format are given
    :return: datetime object representing the date
    :rtype: datetime.date
    """
    ...

def parse_user_date(dateStr): # -> date | Literal[''] | None:
    """
    Get an object representing the possibly empty date given in American format

    :param dateStr: string|None, the date as "m/d/Y", "m/d/y", "m/d" or empty
    :raises ValueError: when an unparsable date is given
    :raises TypeError: when the given date is not a string or None
    :return: object representing the date
    :rtype: datetime.date
    """
    ...

def iso_to_user_date(dateISO, doWarn=...): # -> str | None:
    """
    Convert ISO date string into American date ("m/d/Y" format)

    :param dateISO: string, date in ISO format
    :param doWarn: bool, emit warning if the date format is not as expected
    :return: date represented in American format
    :rtype: str
    """
    ...

def parse_timestamp(timestamp, form=...): # -> datetime:
    """
    Create a datetime object representing the timestamp string

    :param timestamp: string, the timestamp in the given format
    :param form: string, format to expect when parsing, defaults to
        ``"%Y-%m-%d %H:%M:%S"``
    :raises ValueError: when an unparsable date or invalid format are given
    :raises TypeError: when the timestamp is not a string or None
    :return: datetime.datetime object representing the date
    :rtype: datetime.datetime
    """
    ...

def parse_date_idem(dateRepr): # -> date | Literal[''] | None:
    """
    Get a datetime object representing the date given in various formats

    :param dateRepr: str|datetime.date(time)|None, date in various formats
    :return: datetime.datetime object representing the date, or None if unable
        to parse the date
    :rtype: datetime.datetime|None
    """
    ...

def parse_digits(inputStr): # -> tuple[str, str]:
    """
    Get any leading digits from the input string

    :param inputStr: string to parse for leading digits
    :raises TypeError: when the input is not a string
    :return: (string, string) parsed digits and remaining string portion
    """
    ...

def parse_numeric(inputStr): # -> tuple[float, Any | Literal['']]:
    """
    Get a numeric prefix, including potential fraction part, from a string

    Ignores initial whitespace.

    :param inputStr: string to parse for a numeric prefix
    :raises ValueError: when no numeric data is found or fractional data
        cannot be parsed
    :return: (float, string), parsed number and remaining string portion
    """
    ...

def parse_nonnumeric(inputStr): # -> tuple[LiteralString | Any, Any | Literal['']]:
    """Get the next nonnumeric, whitespace-delimited word from the input

    :param inputStr: string to parse for a numeric prefix
    :return: (string, string), parsed word and remaining string portion
    """
    ...

def amount_to_grams(amount, nonFatalErrors: list | None = ...): # -> int:
    """
    Parse a weight amount and convert it grams

    Provides a non-fatal error and assumes the unit is grams if unit is not
        given explicitly in `amount`.
    :param amount: string, the weight amount to parse
    :param nonFatalErrors: list, a list to collect non-fatal errors
    :raises ValueError, when unrecognized units are provided
    :return: float, the weight converted to grams
    """
    ...

def alpha(number, lower=...): # -> str:
    """
    Convert a number to an spreadsheet column letter

    :param num: int, the number 1-26 to convert to letter
    :raises TypeError: when ``num`` is not an integer
    :raises ValueError: when ``num`` is not in the range 1-26
    :param lower: bool, whether to produce lowercase letter, defaults to False
    :return: the letter corresponding to the number
    :rtype: str
    """
    ...

def num(letter): # -> int:
    """
    Convert a spreadsheet column letter to a 1-indexed number

    :param letter: string, the letter to convert to a number
    :raises TypeError: when ``letter`` is not a string
    :raises ValueError: when ``letter`` is not a single character
    :return: the number corresponding to the letter
    :rtype: int
    """
    ...

def parse_range(sheetRange): # -> tuple[str, tuple[int, int], tuple[int, int | None]]:
    """
    Parse a spreadsheet range string into its components: sheet name, start
        cell and optional end cell

    :param sheetRange: string, the range to parse
    :return: (string, (int, int|None), (int, int|None)), the sheet name, start
        cell and end cell coordinates (with columns represented as numbers, not
        letters)
    """
    ...

def html_escape(val): # -> Literal['']:
    """
    Escape the given value for HTML display

    :param val: string|None, the value to escape
    :return: string, the escaped value
    """
    ...

