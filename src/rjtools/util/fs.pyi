"""
This type stub file was generated by pyright.
"""

"""
Filesystem access wrapper to support redirection

Includes wrappers for `open` and relevant `os[.path]` methods and that also
hit the fs.
"""
class StandardFS:
    """
    Simple wrappers calling the standard `os[.path]` methods.
    """
    def binary_open(self, filepath): # -> BufferedReader:
        ...
    
    def text_open(self, filepath): # -> TextIOWrapper[_WrappedBuffer]:
        ...
    
    def text_open_utf8(self, filepath): # -> TextIOWrapper[_WrappedBuffer]:
        ...
    
    def is_file(self, path): # -> bool:
        ...
    
    def is_dir(self, path): # -> bool:
        ...
    
    def is_link(self, path): # -> bool:
        ...
    
    def unlink(self, path): # -> None:
        ...
    
    def walk(self, path): # -> Iterator[tuple[Any, list[Any], list[Any]]]:
        ...
    
    def get_modify_time(self, path): # -> float:
        ...
    
    def get_real_path(self, path, strict=...):
        ...
    


class StubFS:
    """
    Present in-memory data as a filesystem
    """
    def __init__(self, mockfiles=...) -> None:
        ...
    
    startTime = ...
    def is_file_content(self, val): # -> bool:
        ...
    
    def is_directory_content(self, val): # -> bool:
        ...
    
    def is_symlink_content(self, val): # -> bool:
        ...
    
    def resolve(self, path): # -> tuple[Any, Any | dict[Any, Any]]:
        ...
    
    def binary_open(self, filepath): # -> BytesIO:
        ...
    
    def text_open(self, filepath): # -> TextIOWrapper[BytesIO]:
        ...
    
    def text_open_utf8(self, filepath): # -> TextIOWrapper[BytesIO]:
        ...
    
    def is_file(self, path): # -> bool:
        ...
    
    def is_dir(self, path): # -> bool:
        ...
    
    def is_link(self, path): # -> bool:
        ...
    
    def unlink(self, path): # -> None:
        ...
    
    def get_modify_time(self, path): # -> float:
        ...
    
    def walk(self, path): # -> None:
        ...
    
    def get_real_path(self, path, strict=...):
        ...
    


fs = ...
def install_mocks(mockfiles): # -> None:
    ...

def binary_open(filepath): # -> BufferedReader | BytesIO:
    ...

def text_open(filepath): # -> TextIOWrapper[BytesIO] | TextIOWrapper[_WrappedBuffer]:
    ...

def text_open_utf8(filepath): # -> TextIOWrapper[BytesIO] | TextIOWrapper[_WrappedBuffer]:
    ...

def is_file(path): # -> bool:
    ...

def is_dir(path): # -> bool:
    ...

def is_link(path): # -> bool:
    ...

def unlink(path): # -> None:
    ...

def walk(path): # -> Iterator[tuple[Any, list[Any], list[Any]]] | None:
    ...

def get_modify_time(path): # -> float:
    ...

def get_real_path(path, strict=...):
    ...

def insert_suffix_into_filename(filepath, suffix): # -> str:
    """
    Inject the given suffix into the filename prior to the extension.

    :param filepath: the path or filename to insert `suffix` into
    :param suffix: suffix to insert
    """
    ...

def is_root(filepath):
    """
    Detect whether the given path is the root of the filesystem

    :param filepath: the path or filename to insert `suffix` into
    """
    ...

